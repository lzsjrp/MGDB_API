// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String @id @default(uuid())
  email       String @unique
  name        String
  password    String
  permissions Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  favorites UserFavorites[]
}

model UserFavorites {
  userId String
  bookId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([userId, bookId])
  @@index([userId])
  @@index([bookId])
}

model Scanlator {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  website     String?
  discord     String?
  twitter     String?
  languages   String[]
  addedBy     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploads BookChapter[]
}

model Session {
  id     String @id @default(uuid())
  userId String
  token  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum TitleType {
  MANGA
  WEB_NOVEL
}

model Book {
  id          String    @id @default(uuid())
  title       String
  author      String
  description String?
  type        TitleType
  status      String
  addedBy     String
  genre       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  volumes     BookVolume[]
  cover       BookCover?
  images      ImageChapter[]
  favoritedBy UserFavorites[]
}

model Categories {
  id       String   @id @default(uuid())
  name     String   @unique
  booksIds String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model BookVolume {
  id      String @id @default(uuid())
  bookId  String
  title   String
  number  Int
  addedBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  chapters BookChapter[]

  @@unique([bookId, number])
  @@index([bookId])
}

model BookChapter {
  id          String  @id @default(uuid())
  bookId      String
  volumeId    String
  title       String
  number      Int
  scanlatorId String?
  content     String?
  addedBy     String
  language   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  volume    BookVolume     @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  scanlator Scanlator?     @relation(fields: [scanlatorId], references: [id], onDelete: SetNull)
  images    ImageChapter[]

  @@index([volumeId])
}

model ImageChapter {
  id         String @id @default(uuid())
  bookId     String
  chapterId  String
  pageNumber Int
  imageUrl   String
  addedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter BookChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  book    Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model BookCover {
  id       String @id @default(uuid())
  bookId   String @unique
  imageUrl String
  addedBy  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}
