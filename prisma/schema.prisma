// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  name     String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
}

model Session {
  id     String @id @default(uuid())
  userId String
  token  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Manga {
  id          String   @id @default(uuid())
  title       String
  author      String
  description String?
  type        String
  status      String
  addedBy     String
  genre       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters MangaChapter[]
}

model MangaChapter {
  id         String @id @default(uuid())
  mangaId    String
  title      String
  number     Int
  pagesCount Int
  addedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  manga Manga @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  ChapterPage MangaChapterPage[]

  @@index([mangaId])
}

model MangaChapterPage {
  id         String @id @default(uuid())
  chapterId  String
  pageNumber Int
  imageUrl   String
  addedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter MangaChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

model WebNovel {
  id          String   @id @default(uuid())
  title       String
  author      String
  description String?
  type        String
  status      String
  addedBy     String
  genre       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  volumes NovelVolume[]
}

model NovelVolume {
  id         String @id @default(uuid())
  webNovelId String
  title      String
  number     Int
  addedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  webNovel WebNovel @relation(fields: [webNovelId], references: [id], onDelete: Cascade)

  chapters NovelChapter[]

  @@index([webNovelId])
}

model NovelChapter {
  id         String @id @default(uuid())
  webNovelId String
  volumeId   String
  title      String
  number     Int
  content    String
  addedBy    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  volume NovelVolume @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@index([volumeId])
}

model TitleCover {
  id       String @id @default(uuid())
  titleId  String @unique
  imageUrl String
  addedBy  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
